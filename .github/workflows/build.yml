name: Build samples-test-spring
on: [push]
jobs:
  test:
    runs-on: ubuntu-latest
    #if: ${{ false }}  # disable for now
    steps:
      - name: Checkout GitHub repo
        uses: actions/checkout@v2
      #Especifica java 8, con la version por defecto causa: Corrupted STDOUT by directly writing to native stream in forked JVM 1
      - name: Select Java Version
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '8'
          cache: 'maven'

      #Las urls para test se localizan en un fichero properties que en local no se necesita pues usan valores por defecto
      #En CI con GitHub actions se puede utilizar chrome que viene instalado en los ejecutores en modo headless
      #- name: Configuration for Chrome headless
      #  run: |
      #    echo "remote.web.driver.url=headless" > samples-test-spring.properties
      #    echo "application.url=http://localhost" >> samples-test-spring.properties
      #
      #Para utilizar selenoid se debe indicar como url de la aplicacion la ip de este ejecutor, la del driver es localhost porque el container mapeara el puerto
      #Configura tambien browsers.json que necesita Selenoid (la version debe coincidir con la del container)
      #Para usar vnc hay que especificar una version, p.e. selenoid/vnc:chrome_95.0
      - name: Selenoid configuration
        run: |
          echo "remote.web.driver.url=http://127.0.0.1:4444/wd/hub" > samples-test-spring.properties
          echo "application.url=http://`(hostname -i)`" >> samples-test-spring.properties
          mkdir -p target/browsers
          echo '{"chrome": {"default": "latest", "versions": {"latest": {"image":"selenoid/chrome:latest","port":"4444","tmpfs": {"/tmp":"size=512m"} } } } }' > target/browsers/browsers.json

      - name: Selenoid startup
        run: |
          mkdir -p target/site/video
          docker pull selenoid/chrome:latest
          docker pull selenoid/video-recorder:latest-release
          docker run -d --name selenoid -p 4444:4444 \
            -v /var/run/docker.sock:/var/run/docker.sock -v $GITHUB_WORKSPACE/target/browsers:/etc/selenoid/:ro \
            -v $GITHUB_WORKSPACE/target/site/video/:/opt/selenoid/video/ -e OVERRIDE_VIDEO_OUTPUT_DIR=$GITHUB_WORKSPACE/target/site/video/ \
            aerokube/selenoid:latest-release
          docker logs selenoid

      #Ejecuta maven haciendo que falle si fallan los tests
      #Como esto no generara reports, en caso de fallo rejecuta maven sin los tests para poder gnerarlos
      - name: Build and test
        run: mvn verify -Dmaven.test.failure.ignore=false
      - if: failure()
        name: Try test report generation after failure
        run: mvn verify -Dmaven.test.skip=true -Dassembly.skipAssembly=true && echo "Exit with error" && exit 1

      - if: always()
        name: Selenoid stop
        run: docker stop selenoid
      - if: always()
        name: Publish test reports
        uses: actions/upload-artifact@v2
        with:
          name: test-reports
          path: target/site/
      - if: always()
        name: Publish test reports for sonarqube job
        uses: actions/upload-artifact@v2
        with:
          name: test-reports-for-sonar
          path: |
            target/surefire-reports/
            target/failsafe-reports/
            target/site/jacoco*/jacoco.xml

  dependency-check:
    needs: [test]
    runs-on: ubuntu-latest
    #if: ${{ false }}  # disable for now
    steps:
      - uses: actions/checkout@v2
      #use default java, custom version gives error running dependency-check: JAVA_HOME not defined
      - uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
      - name: Build jar with dependencies
        run: mvn package -DskipTests=true
      - run: ls -la target
      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'samples-test-spring'
          path: 'target/*-jar-with-dependencies.jar'
          format: 'HTML'
          #formato json adicional para sonarqube, --failOnCVSS 7 para fallar build por dependencias vultnerables
          args: --format JSON
      - if: always()
        name: Publish reports
        uses: actions/upload-artifact@v2
        with:
          name: dependency-check-reports
          path: reports/

  sonarqube:
    needs: [test]
    #if: ${{ false }}  # disable for now
    runs-on: ubuntu-latest
    steps:
      #Configuracion inicial recomendada por sonarCloud
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      #compilar antes de restaurar reports y realizar el analisis
      - name: Generate classes
        run: mvn test-compile
      - name: Restore test reports
        uses: actions/download-artifact@v2
        with:
          name: test-reports-for-sonar
          path: target
      #suprime los reports de owasp dependency-check porque sonarcloud.io no tiene plugin para importarlos
      #- name: Restore dependency check reports
      #  uses: actions/download-artifact@v2
      #  with:
      #    name: dependency-check-reports
      #    path: target

      #- name: SonarQube Analysis
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
      #    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #  run: mvn org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=my:samples-test-spring -Dsonar.organization=giis -Dproject.settings=sonar-project.properties
      #El plugin de maven no lee el archivo sonar-project.properties ni .sonarcloud.properties, ejecuta el scanner de forma manual
      - name: Download sonarscanner
        run: curl --insecure -o ./sonarscanner.zip -L https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip && unzip -q sonarscanner.zip
      - name: SonarQube Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: sonar-scanner-4.6.2.2472-linux/bin/sonar-scanner -Dsonar.host.url=https://sonarcloud.io -Dsonar.projectKey=my:samples-test-spring -Dsonar.organization=giis
      - name: SonarQube Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}